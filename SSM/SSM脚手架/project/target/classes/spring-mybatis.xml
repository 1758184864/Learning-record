<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

  <!--关联数据库配置文件-->
  <context:property-placeholder location="classpath:jdbc.properties" />

  <!--配置数据源：数据源有非常多，可以使用第三方的，也可使使用Spring的-->
  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="${jdbc.driverClassName}"/>
    <property name="url" value="${jdbc.url}"/>
    <property name="username" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>
  </bean>

  <!--配置SqlSessionFactory对象-->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <!-- 注入数据库连接池 -->
    <property name="dataSource" ref="dataSource"/>
    <!-- 绑定Mybatis核心配合文件 -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
  </bean>

  <!-- 4.配置扫描mapper接口包，动态实现mapper接口注入到spring容器中 -->
  <!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html-->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!-- 注入sqlSessionFactory -->
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    <!-- 扫描mapper包，自动创建映射器并完成自动装配 -->
    <property name="basePackage" value="com.jc.mapper"/>
  </bean>


  <!-- 注册service下的JavaBean（包扫描） -->
  <context:component-scan base-package="com.jc.service" />

  <!--事务管理-->
  <!--1.创建事务管理器-->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <!--配置数据源-->
    <constructor-arg ref="dataSource" />
  </bean>

  <!--2.开启事务注解，需要导入约束-->
  <!--transaction-manager="transactionManager" : 绑定事务管理器-->
  <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>